Value, DataType 
DataRaw [id=3, Fatherid=2, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=3, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i<3, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=timer_clear, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=timer_clear(i), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=timer_clear(i);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
timer_clear(i);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (i=0; i<3; i ++ )
{
timer_clear(i);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastrow-firstrow), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastrow-firstrow)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastrow-firstrow)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(colidx[k]-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx[k]=(colidx[k]-firstcol), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[k]=(colidx[k]-firstcol);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
colidx[k]=(colidx[k]-firstcol);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
colidx[k]=(colidx[k]-firstcol);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
colidx[k]=(colidx[k]-firstcol);
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastrow-firstrow)+1); j ++ )
{
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
colidx[k]=(colidx[k]-firstcol);
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(colidx[k]-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=colidx[k]=(colidx[k]-firstcol), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=colidx[k]=(colidx[k]-firstcol);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
colidx[k]=(colidx[k]-firstcol);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
colidx[k]=(colidx[k]-firstcol);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1500000, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=(1500000+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i<(1500000+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=x[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=1.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=x[i]=1.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=x[i]=1.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
x[i]=1.0;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (i=0; i<(1500000+1); i ++ )
{
x[i]=1.0;
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=q, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=q[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=q[j]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=q[j]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=z[j]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=z[j]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=r[j]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=r[j]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=p[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=p[j]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=p[j]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
q[j]=0.0;
z[j]=0.0;
r[j]=0.0;
p[j]=0.0;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
q[j]=0.0;
z[j]=0.0;
r[j]=0.0;
p[j]=0.0;
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=it, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=it=1, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=it=1;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=it, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=it<=1, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=it, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=it ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=conj_grad, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=q, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rnorm, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=( & rnorm), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=conj_grad(colidx, rowstr, x, z, a, p, q, r, ( & rnorm)), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=conj_grad(colidx, rowstr, x, z, a, p, q, r, ( & rnorm));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=norm_temp1=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=norm_temp1=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=norm_temp2=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=norm_temp2=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=norm_temp1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=norm_temp1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=x[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(x[j]*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(norm_temp1+(x[j]*z[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=norm_temp1=(norm_temp1+(x[j]*z[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp1=(norm_temp1+(x[j]*z[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(z[j]*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(norm_temp2+(z[j]*z[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=norm_temp2=(norm_temp2+(z[j]*z[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp2=(norm_temp2+(z[j]*z[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=sqrt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=sqrt(norm_temp2), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(1.0/sqrt(norm_temp2)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=norm_temp2=(1.0/sqrt(norm_temp2)), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=norm_temp2=(1.0/sqrt(norm_temp2));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=x[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(norm_temp2*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=x[j]=(norm_temp2*z[j]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=x[j]=(norm_temp2*z[j]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
x[j]=(norm_temp2*z[j]);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
x[j]=(norm_temp2*z[j]);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
conj_grad(colidx, rowstr, x, z, a, p, q, r, ( & rnorm));
norm_temp1=0.0;
norm_temp2=0.0;
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}
norm_temp2=(1.0/sqrt(norm_temp2));
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
x[j]=(norm_temp2*z[j]);
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (it=1; it<=1; it ++ )
{
conj_grad(colidx, rowstr, x, z, a, p, q, r, ( & rnorm));
norm_temp1=0.0;
norm_temp2=0.0;
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}
norm_temp2=(1.0/sqrt(norm_temp2));
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
x[j]=(norm_temp2*z[j]);
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=norm_temp1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=x[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(x[j]*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(norm_temp1+(x[j]*z[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=norm_temp1=(norm_temp1+(x[j]*z[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=norm_temp1=(norm_temp1+(x[j]*z[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(z[j]*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(norm_temp2+(z[j]*z[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=norm_temp2=(norm_temp2+(z[j]*z[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=norm_temp2=(norm_temp2+(z[j]*z[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=x[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(norm_temp2*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=x[j]=(norm_temp2*z[j]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=x[j]=(norm_temp2*z[j]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
x[j]=(norm_temp2*z[j]);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
x[j]=(norm_temp2*z[j]);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1500000, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=(1500000+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i<(1500000+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=x[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=1.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=x[i]=1.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=x[i]=1.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
x[i]=1.0;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (i=0; i<(1500000+1); i ++ )
{
x[i]=1.0;
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=it, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=it=1, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=it=1;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=it, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=100, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=it<=100, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=it, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=it ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=timeron, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=timer_start, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=2, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=timer_start(2), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=timer_start(2);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
timer_start(2);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if (timeron)
{
timer_start(2);
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=conj_grad, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=q, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rnorm, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=( & rnorm), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=conj_grad(colidx, rowstr, x, z, a, p, q, r, ( & rnorm)), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=conj_grad(colidx, rowstr, x, z, a, p, q, r, ( & rnorm));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=timeron, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=timer_stop, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=2, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=timer_stop(2), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=timer_stop(2);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
timer_stop(2);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if (timeron)
{
timer_stop(2);
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=norm_temp1=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=norm_temp1=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=norm_temp2=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=norm_temp2=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=norm_temp1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=norm_temp1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=x[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(x[j]*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(norm_temp1+(x[j]*z[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=norm_temp1=(norm_temp1+(x[j]*z[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp1=(norm_temp1+(x[j]*z[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(z[j]*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(norm_temp2+(z[j]*z[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=norm_temp2=(norm_temp2+(z[j]*z[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp2=(norm_temp2+(z[j]*z[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=sqrt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=sqrt(norm_temp2), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(1.0/sqrt(norm_temp2)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=norm_temp2=(1.0/sqrt(norm_temp2)), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=norm_temp2=(1.0/sqrt(norm_temp2));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=zeta, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=500.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=1.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=norm_temp1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(1.0/norm_temp1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(500.0+(1.0/norm_temp1)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=zeta=(500.0+(1.0/norm_temp1)), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=zeta=(500.0+(1.0/norm_temp1));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=it, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(it==1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=printf, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value="\n   iteration           ||r||                 zeta\n", typeValue=STRING EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=printf("\n   iteration           ||r||                 zeta\n"), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=printf("\n   iteration           ||r||                 zeta\n");, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
printf("\n   iteration           ||r||                 zeta\n");
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if ((it==1))
{
printf("\n   iteration           ||r||                 zeta\n");
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=printf, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value="    %5d       %20.14E%20.13f\n", typeValue=STRING EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=it, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rnorm, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=zeta, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=printf("    %5d       %20.14E%20.13f\n", it, rnorm, zeta), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=printf("    %5d       %20.14E%20.13f\n", it, rnorm, zeta);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=x[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(norm_temp2*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=x[j]=(norm_temp2*z[j]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=x[j]=(norm_temp2*z[j]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
x[j]=(norm_temp2*z[j]);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
x[j]=(norm_temp2*z[j]);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
if (timeron)
{
timer_start(2);
}
conj_grad(colidx, rowstr, x, z, a, p, q, r, ( & rnorm));
if (timeron)
{
timer_stop(2);
}
norm_temp1=0.0;
norm_temp2=0.0;
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}
norm_temp2=(1.0/sqrt(norm_temp2));
zeta=(500.0+(1.0/norm_temp1));
if ((it==1))
{
printf("\n   iteration           ||r||                 zeta\n");
}
printf("    %5d       %20.14E%20.13f\n", it, rnorm, zeta);
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
x[j]=(norm_temp2*z[j]);
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (it=1; it<=100; it ++ )
{
if (timeron)
{
timer_start(2);
}
conj_grad(colidx, rowstr, x, z, a, p, q, r, ( & rnorm));
if (timeron)
{
timer_stop(2);
}
norm_temp1=0.0;
norm_temp2=0.0;
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}
norm_temp2=(1.0/sqrt(norm_temp2));
zeta=(500.0+(1.0/norm_temp1));
if ((it==1))
{
printf("\n   iteration           ||r||                 zeta\n");
}
printf("    %5d       %20.14E%20.13f\n", it, rnorm, zeta);
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
x[j]=(norm_temp2*z[j]);
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=norm_temp1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=x[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(x[j]*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(norm_temp1+(x[j]*z[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=norm_temp1=(norm_temp1+(x[j]*z[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=norm_temp1=(norm_temp1+(x[j]*z[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(z[j]*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(norm_temp2+(z[j]*z[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=norm_temp2=(norm_temp2+(z[j]*z[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=norm_temp2=(norm_temp2+(z[j]*z[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
norm_temp1=(norm_temp1+(x[j]*z[j]));
norm_temp2=(norm_temp2+(z[j]*z[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=x[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=norm_temp2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(norm_temp2*z[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=x[j]=(norm_temp2*z[j]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=x[j]=(norm_temp2*z[j]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
x[j]=(norm_temp2*z[j]);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
x[j]=(norm_temp2*z[j]);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=3, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i<3, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=t, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=timer_read, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=timer_read(i), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=t=timer_read(i), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=t=timer_read(i);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(i==0), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=printf, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value="  %8s:%9.3f\n", typeValue=STRING EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=t_names, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=t_names[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=t, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=printf("  %8s:%9.3f\n", t_names[i], t), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=printf("  %8s:%9.3f\n", t_names[i], t);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
printf("  %8s:%9.3f\n", t_names[i], t);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=printf, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value="  %8s:%9.3f  (%6.2f%%)\n", typeValue=STRING EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=t_names, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=t_names[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=t, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=t, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=100.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(t*100.0), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=tmax, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=((t*100.0)/tmax), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=printf("  %8s:%9.3f  (%6.2f%%)\n", t_names[i], t, ((t*100.0)/tmax)), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=printf("  %8s:%9.3f  (%6.2f%%)\n", t_names[i], t, ((t*100.0)/tmax));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=2, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(i==2), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=t, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=tmax, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=t, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=(tmax-t), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=t=(tmax-t), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=t=(tmax-t);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=printf, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value="    --> %8s:%9.3f  (%6.2f%%)\n", typeValue=STRING EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value="rest", typeValue=STRING EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=t, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=t, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=100.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=(t*100.0), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=tmax, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=((t*100.0)/tmax), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=printf("    --> %8s:%9.3f  (%6.2f%%)\n", "rest", t, ((t*100.0)/tmax)), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=printf("    --> %8s:%9.3f  (%6.2f%%)\n", "rest", t, ((t*100.0)/tmax));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
t=(tmax-t);
printf("    --> %8s:%9.3f  (%6.2f%%)\n", "rest", t, ((t*100.0)/tmax));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=if ((i==2))
{
t=(tmax-t);
printf("    --> %8s:%9.3f  (%6.2f%%)\n", "rest", t, ((t*100.0)/tmax));
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
printf("  %8s:%9.3f  (%6.2f%%)\n", t_names[i], t, ((t*100.0)/tmax));
if ((i==2))
{
t=(tmax-t);
printf("    --> %8s:%9.3f  (%6.2f%%)\n", "rest", t, ((t*100.0)/tmax));
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if ((i==0))
{
printf("  %8s:%9.3f\n", t_names[i], t);
}
else
{
printf("  %8s:%9.3f  (%6.2f%%)\n", t_names[i], t, ((t*100.0)/tmax));
if ((i==2))
{
t=(tmax-t);
printf("    --> %8s:%9.3f  (%6.2f%%)\n", "rest", t, ((t*100.0)/tmax));
}
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
t=timer_read(i);
if ((i==0))
{
printf("  %8s:%9.3f\n", t_names[i], t);
}
else
{
printf("  %8s:%9.3f  (%6.2f%%)\n", t_names[i], t, ((t*100.0)/tmax));
if ((i==2))
{
t=(tmax-t);
printf("    --> %8s:%9.3f  (%6.2f%%)\n", "rest", t, ((t*100.0)/tmax));
}
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (i=0; i<3; i ++ )
{
t=timer_read(i);
if ((i==0))
{
printf("  %8s:%9.3f\n", t_names[i], t);
}
else
{
printf("  %8s:%9.3f  (%6.2f%%)\n", t_names[i], t, ((t*100.0)/tmax));
if ((i==2))
{
t=(tmax-t);
printf("    --> %8s:%9.3f  (%6.2f%%)\n", "rest", t, ((t*100.0)/tmax));
}
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=naa, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=(naa+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<(naa+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=q, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=q[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=q[j]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=q[j]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=z[j]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=z[j]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=x[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=r[j]=x[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=r[j]=x[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=p[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=p[j]=r[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=p[j]=r[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
q[j]=0.0;
z[j]=0.0;
r[j]=x[j];
p[j]=r[j];
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<(naa+1); j ++ )
{
q[j]=0.0;
z[j]=0.0;
r[j]=x[j];
p[j]=r[j];
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rho, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rho, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(r[j]*r[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(rho+(r[j]*r[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rho=(rho+(r[j]*r[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rho=(rho+(r[j]*r[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
rho=(rho+(r[j]*r[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
rho=(rho+(r[j]*r[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=cgit, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=cgit=1, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=cgit=1;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=cgit, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=cgitmax, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=cgit<=cgitmax, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=cgit, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=cgit ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=lastrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=firstrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(lastrow-firstrow), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=((lastrow-firstrow)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j<((lastrow-firstrow)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=sum=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=sum=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=p[colidx[k]], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=(a[k]*p[colidx[k]]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=(sum+(a[k]*p[colidx[k]])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=sum=(sum+(a[k]*p[colidx[k]])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=sum=(sum+(a[k]*p[colidx[k]]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
sum=(sum+(a[k]*p[colidx[k]]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
sum=(sum+(a[k]*p[colidx[k]]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=q, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=q[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=q[j]=sum, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=q[j]=sum;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
sum=0.0;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
sum=(sum+(a[k]*p[colidx[k]]));
}
q[j]=sum;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (j=0; j<((lastrow-firstrow)+1); j ++ )
{
sum=0.0;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
sum=(sum+(a[k]*p[colidx[k]]));
}
q[j]=sum;
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=d=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=d=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=p[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=q, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=q[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(p[j]*q[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(d+(p[j]*q[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=d=(d+(p[j]*q[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=d=(d+(p[j]*q[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
d=(d+(p[j]*q[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
d=(d+(p[j]*q[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=alpha, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rho, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(rho/d), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=alpha=(rho/d), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=alpha=(rho/d);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rho0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rho, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rho0=rho, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rho0=rho;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rho, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rho=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rho=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=alpha, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=p[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(alpha*p[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(z[j]+(alpha*p[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=z[j]=(z[j]+(alpha*p[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=z[j]=(z[j]+(alpha*p[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=alpha, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=q, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=q[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(alpha*q[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(r[j]-(alpha*q[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=r[j]=(r[j]-(alpha*q[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=r[j]=(r[j]-(alpha*q[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
z[j]=(z[j]+(alpha*p[j]));
r[j]=(r[j]-(alpha*q[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
z[j]=(z[j]+(alpha*p[j]));
r[j]=(r[j]-(alpha*q[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rho, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=rho, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(r[j]*r[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(rho+(r[j]*r[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rho=(rho+(r[j]*r[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rho=(rho+(r[j]*r[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
rho=(rho+(r[j]*r[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
rho=(rho+(r[j]*r[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=beta, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rho, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rho0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(rho/rho0), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=beta=(rho/rho0), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=beta=(rho/rho0);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=p[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=beta, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=p[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(beta*p[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(r[j]+(beta*p[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=p[j]=(r[j]+(beta*p[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=p[j]=(r[j]+(beta*p[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
p[j]=(r[j]+(beta*p[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
p[j]=(r[j]+(beta*p[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
for (j=0; j<((lastrow-firstrow)+1); j ++ )
{
sum=0.0;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
sum=(sum+(a[k]*p[colidx[k]]));
}
q[j]=sum;
}
d=0.0;
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
d=(d+(p[j]*q[j]));
}
alpha=(rho/d);
rho0=rho;
rho=0.0;
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
z[j]=(z[j]+(alpha*p[j]));
r[j]=(r[j]-(alpha*q[j]));
}
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
rho=(rho+(r[j]*r[j]));
}
beta=(rho/rho0);
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
p[j]=(r[j]+(beta*p[j]));
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (cgit=1; cgit<=cgitmax; cgit ++ )
{
for (j=0; j<((lastrow-firstrow)+1); j ++ )
{
sum=0.0;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
sum=(sum+(a[k]*p[colidx[k]]));
}
q[j]=sum;
}
d=0.0;
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
d=(d+(p[j]*q[j]));
}
alpha=(rho/d);
rho0=rho;
rho=0.0;
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
z[j]=(z[j]+(alpha*p[j]));
r[j]=(r[j]-(alpha*q[j]));
}
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
rho=(rho+(r[j]*r[j]));
}
beta=(rho/rho0);
for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
p[j]=(r[j]+(beta*p[j]));
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastrow-firstrow), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastrow-firstrow)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastrow-firstrow)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=sum=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=sum=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=p[colidx[k]], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(a[k]*p[colidx[k]]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(sum+(a[k]*p[colidx[k]])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=sum=(sum+(a[k]*p[colidx[k]])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=sum=(sum+(a[k]*p[colidx[k]]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
sum=(sum+(a[k]*p[colidx[k]]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
sum=(sum+(a[k]*p[colidx[k]]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=q, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=q[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=q[j]=sum, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=q[j]=sum;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
sum=0.0;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
sum=(sum+(a[k]*p[colidx[k]]));
}
q[j]=sum;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastrow-firstrow)+1); j ++ )
{
sum=0.0;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
sum=(sum+(a[k]*p[colidx[k]]));
}
q[j]=sum;
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=p[colidx[k]], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(a[k]*p[colidx[k]]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(sum+(a[k]*p[colidx[k]])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=sum=(sum+(a[k]*p[colidx[k]])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=sum=(sum+(a[k]*p[colidx[k]]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
sum=(sum+(a[k]*p[colidx[k]]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
sum=(sum+(a[k]*p[colidx[k]]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=p[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=q, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=q[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(p[j]*q[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(d+(p[j]*q[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=d=(d+(p[j]*q[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=d=(d+(p[j]*q[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
d=(d+(p[j]*q[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
d=(d+(p[j]*q[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=z[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=alpha, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=p[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(alpha*p[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(z[j]+(alpha*p[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=z[j]=(z[j]+(alpha*p[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=z[j]=(z[j]+(alpha*p[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=alpha, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=q, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=q[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(alpha*q[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(r[j]-(alpha*q[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=r[j]=(r[j]-(alpha*q[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=r[j]=(r[j]-(alpha*q[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
z[j]=(z[j]+(alpha*p[j]));
r[j]=(r[j]-(alpha*q[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
z[j]=(z[j]+(alpha*p[j]));
r[j]=(r[j]-(alpha*q[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rho, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rho, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(r[j]*r[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(rho+(r[j]*r[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rho=(rho+(r[j]*r[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rho=(rho+(r[j]*r[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
rho=(rho+(r[j]*r[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
rho=(rho+(r[j]*r[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=p[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=beta, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=p, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=p[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(beta*p[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(r[j]+(beta*p[j])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=p[j]=(r[j]+(beta*p[j])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=p[j]=(r[j]+(beta*p[j]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
p[j]=(r[j]+(beta*p[j]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
p[j]=(r[j]+(beta*p[j]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastrow-firstrow), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastrow-firstrow)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastrow-firstrow)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=d=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=d=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=z[colidx[k]], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(a[k]*z[colidx[k]]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(d+(a[k]*z[colidx[k]])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=d=(d+(a[k]*z[colidx[k]])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=d=(d+(a[k]*z[colidx[k]]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
d=(d+(a[k]*z[colidx[k]]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
d=(d+(a[k]*z[colidx[k]]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=r[j]=d, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=r[j]=d;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
d=0.0;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
d=(d+(a[k]*z[colidx[k]]));
}
r[j]=d;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastrow-firstrow)+1); j ++ )
{
d=0.0;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
d=(d+(a[k]*z[colidx[k]]));
}
r[j]=d;
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=z, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=z[colidx[k]], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(a[k]*z[colidx[k]]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(d+(a[k]*z[colidx[k]])), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=d=(d+(a[k]*z[colidx[k]])), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=d=(d+(a[k]*z[colidx[k]]));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
d=(d+(a[k]*z[colidx[k]]));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
d=(d+(a[k]*z[colidx[k]]));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastcol-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastcol-firstcol)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=x, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=x[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=r, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=r[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(x[j]-r[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=d=(x[j]-r[j]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=d=(x[j]-r[j]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=sum, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=d, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(d*d), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(sum+(d*d)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=sum=(sum+(d*d)), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=sum=(sum+(d*d));, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
d=(x[j]-r[j]);
sum=(sum+(d*d));
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastcol-firstcol)+1); j ++ )
{
d=(x[j]-r[j]);
sum=(sum+(d*d));
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nn1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=2, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nn1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(2*nn1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nn1=(2*nn1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nn1=(2*nn1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
nn1=(2*nn1);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nn1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=n, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=nn1<n, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=do
{
nn1=(2*nn1);
}while(nn1<n);
, typeValue=LOOP DO_LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=iouter, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=iouter=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=iouter=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=iouter, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=n, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=iouter<n, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=iouter, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=iouter ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=21, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nzv=21, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nzv=21;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=sprnvc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=n, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nn1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=vc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=ivc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=sprnvc(n, nzv, nn1, vc, ivc), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=sprnvc(n, nzv, nn1, vc, ivc);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=vecset, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=n, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=vc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=ivc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=( & nzv), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=iouter, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(iouter+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.5, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=vecset(n, vc, ivc, ( & nzv), (iouter+1), 0.5), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=vecset(n, vc, ivc, ( & nzv), (iouter+1), 0.5);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=arow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=iouter, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=arow[iouter], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=arow[iouter]=nzv, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=arow[iouter]=nzv;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=ivelt=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=ivelt=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=ivelt<nzv, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=ivelt ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=acol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=iouter, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=acol[iouter][ivelt], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=ivc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=ivc[ivelt], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(ivc[ivelt]-1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=acol[iouter][ivelt]=(ivc[ivelt]-1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=acol[iouter][ivelt]=(ivc[ivelt]-1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=aelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=iouter, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=aelt[iouter][ivelt], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=vc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=vc[ivelt], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=aelt[iouter][ivelt]=vc[ivelt], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=aelt[iouter][ivelt]=vc[ivelt];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
acol[iouter][ivelt]=(ivc[ivelt]-1);
aelt[iouter][ivelt]=vc[ivelt];
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (ivelt=0; ivelt<nzv; ivelt ++ )
{
acol[iouter][ivelt]=(ivc[ivelt]-1);
aelt[iouter][ivelt]=vc[ivelt];
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
nzv=21;
sprnvc(n, nzv, nn1, vc, ivc);
vecset(n, vc, ivc, ( & nzv), (iouter+1), 0.5);
arow[iouter]=nzv;
for (ivelt=0; ivelt<nzv; ivelt ++ )
{
acol[iouter][ivelt]=(ivc[ivelt]-1);
aelt[iouter][ivelt]=vc[ivelt];
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (iouter=0; iouter<n; iouter ++ )
{
nzv=21;
sprnvc(n, nzv, nn1, vc, ivc);
vecset(n, vc, ivc, ( & nzv), (iouter+1), 0.5);
arow[iouter]=nzv;
for (ivelt=0; ivelt<nzv; ivelt ++ )
{
acol[iouter][ivelt]=(ivc[ivelt]-1);
aelt[iouter][ivelt]=vc[ivelt];
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=ivelt=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=ivelt=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=ivelt<nzv, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=ivelt ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=acol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=iouter, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=acol[iouter][ivelt], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=ivc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=ivc[ivelt], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(ivc[ivelt]-1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=acol[iouter][ivelt]=(ivc[ivelt]-1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=acol[iouter][ivelt]=(ivc[ivelt]-1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=aelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=iouter, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=aelt[iouter][ivelt], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=vc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=ivelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=vc[ivelt], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=aelt[iouter][ivelt]=vc[ivelt], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=aelt[iouter][ivelt]=vc[ivelt];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
acol[iouter][ivelt]=(ivc[ivelt]-1);
aelt[iouter][ivelt]=vc[ivelt];
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (ivelt=0; ivelt<nzv; ivelt ++ )
{
acol[iouter][ivelt]=(ivc[ivelt]-1);
aelt[iouter][ivelt]=vc[ivelt];
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nrows, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=(nrows+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<(nrows+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr[j]=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rowstr[j]=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
rowstr[j]=0;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<(nrows+1); j ++ )
{
rowstr[j]=0;
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=n, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i<n, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nza=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nza=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=arow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=arow[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nza<arow[i], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nza ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=acol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=acol[i][nza], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(acol[i][nza]+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j=(acol[i][nza]+1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j=(acol[i][nza]+1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=arow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=arow[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(rowstr[j]+arow[i]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[j]=(rowstr[j]+arow[i]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[j]=(rowstr[j]+arow[i]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
j=(acol[i][nza]+1);
rowstr[j]=(rowstr[j]+arow[i]);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (nza=0; nza<arow[i]; nza ++ )
{
j=(acol[i][nza]+1);
rowstr[j]=(rowstr[j]+arow[i]);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
for (nza=0; nza<arow[i]; nza ++ )
{
j=(acol[i][nza]+1);
rowstr[j]=(rowstr[j]+arow[i]);
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (i=0; i<n; i ++ )
{
for (nza=0; nza<arow[i]; nza ++ )
{
j=(acol[i][nza]+1);
rowstr[j]=(rowstr[j]+arow[i]);
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nza=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=nza=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=arow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=arow[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=nza<arow[i], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=nza ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=acol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=acol[i][nza], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(acol[i][nza]+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j=(acol[i][nza]+1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=(acol[i][nza]+1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=arow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=arow[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(rowstr[j]+arow[i]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr[j]=(rowstr[j]+arow[i]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rowstr[j]=(rowstr[j]+arow[i]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
j=(acol[i][nza]+1);
rowstr[j]=(rowstr[j]+arow[i]);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (nza=0; nza<arow[i]; nza ++ )
{
j=(acol[i][nza]+1);
rowstr[j]=(rowstr[j]+arow[i]);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=1, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=1;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nrows, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=(nrows+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<(nrows+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(j-1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[(j-1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(rowstr[j]+rowstr[(j-1)]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr[j]=(rowstr[j]+rowstr[(j-1)]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rowstr[j]=(rowstr[j]+rowstr[(j-1)]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
rowstr[j]=(rowstr[j]+rowstr[(j-1)]);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=1; j<(nrows+1); j ++ )
{
rowstr[j]=(rowstr[j]+rowstr[(j-1)]);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nrows, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<nrows, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=a[k]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=a[k]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=( - 1), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx[k]=( - 1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[k]=( - 1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
a[k]=0.0;
colidx[k]=( - 1);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
a[k]=0.0;
colidx[k]=( - 1);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nzloc[j]=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nzloc[j]=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
a[k]=0.0;
colidx[k]=( - 1);
}
nzloc[j]=0;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<nrows; j ++ )
{
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
a[k]=0.0;
colidx[k]=( - 1);
}
nzloc[j]=0;
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=a[k]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=a[k]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=( - 1), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=colidx[k]=( - 1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=colidx[k]=( - 1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
a[k]=0.0;
colidx[k]=( - 1);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
a[k]=0.0;
colidx[k]=( - 1);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=n, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i<n, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nza=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nza=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=arow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=arow[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nza<arow[i], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nza ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=acol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=acol[i][nza], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j=acol[i][nza], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j=acol[i][nza];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=scale, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=size, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=aelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=aelt[i][nza], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(size*aelt[i][nza]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=scale=(size*aelt[i][nza]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=scale=(size*aelt[i][nza]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nzrow=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzrow=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=arow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=arow[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzrow<arow[i], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzrow ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=acol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=acol[i][nzrow], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=jcol=acol[i][nzrow], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=jcol=acol[i][nzrow];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=aelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=aelt[i][nzrow], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=scale, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=(aelt[i][nzrow]*scale), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=va=(aelt[i][nzrow]*scale), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=va=(aelt[i][nzrow]*scale);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=(jcol==j), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=(j==i), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=((jcol==j)&&(j==i)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=rcond, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=(va+rcond), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=shift, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=((va+rcond)-shift), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=va=((va+rcond)-shift), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=va=((va+rcond)-shift);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value={
va=((va+rcond)-shift);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=false, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=cont40=false, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=cont40=false;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=(colidx[k]>jcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=2, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=(rowstr[(j+1)]-2), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=kk=(rowstr[(j+1)]-2), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=kk=(rowstr[(j+1)]-2);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=kk>=k, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=kk -- , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=colidx[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=( - 1), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=(colidx[kk]>( - 1)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=18, Fatherid=17, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=18, Fatherid=17, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=(kk+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=a[(kk+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=a[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=a[(kk+1)]=a[kk], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=a[(kk+1)]=a[kk];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=18, Fatherid=17, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=18, Fatherid=17, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=(kk+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=colidx[(kk+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=colidx[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=colidx[(kk+1)]=colidx[kk], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=colidx[(kk+1)]=colidx[kk];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value={
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value={
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx[k]=jcol, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx[k]=jcol;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=a[k]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=a[k]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value={
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=( - 1), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=(colidx[k]==( - 1)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=colidx[k]=jcol, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=colidx[k]=jcol;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value={
colidx[k]=jcol;
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=(colidx[k]==jcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=18, Fatherid=17, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=18, Fatherid=17, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=17, Fatherid=16, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=(nzloc[j]+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=nzloc[j]=(nzloc[j]+1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=nzloc[j]=(nzloc[j]+1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value={
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value={
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value={
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value={
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=false, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(cont40==false), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=printf, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value="internal error in sparse: i=%d\n", typeValue=STRING EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=printf("internal error in sparse: i=%d\n", i), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=printf("internal error in sparse: i=%d\n", i);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=exit, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=exit(1), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=exit(1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value={
printf("internal error in sparse: i=%d\n", i);
exit(1);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=(a[k]+va), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a[k]=(a[k]+va), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a[k]=(a[k]+va);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=for (nzrow=0; nzrow<arow[i]; nzrow ++ )
{
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
j=acol[i][nza];
scale=(size*aelt[i][nza]);
for (nzrow=0; nzrow<arow[i]; nzrow ++ )
{
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (nza=0; nza<arow[i]; nza ++ )
{
j=acol[i][nza];
scale=(size*aelt[i][nza]);
for (nzrow=0; nzrow<arow[i]; nzrow ++ )
{
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=size, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=size, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=ratio, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(size*ratio), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=size=(size*ratio), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=size=(size*ratio);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
for (nza=0; nza<arow[i]; nza ++ )
{
j=acol[i][nza];
scale=(size*aelt[i][nza]);
for (nzrow=0; nzrow<arow[i]; nzrow ++ )
{
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}
}
size=(size*ratio);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (i=0; i<n; i ++ )
{
for (nza=0; nza<arow[i]; nza ++ )
{
j=acol[i][nza];
scale=(size*aelt[i][nza]);
for (nzrow=0; nzrow<arow[i]; nzrow ++ )
{
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}
}
size=(size*ratio);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nza=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=nza=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=arow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=arow[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=nza<arow[i], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=nza ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=acol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=acol[i][nza], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j=acol[i][nza], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=acol[i][nza];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=scale, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=size, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=aelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=aelt[i][nza], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(size*aelt[i][nza]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=scale=(size*aelt[i][nza]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=scale=(size*aelt[i][nza]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nzrow=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nzrow=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=arow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=arow[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nzrow<arow[i], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nzrow ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=acol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=acol[i][nzrow], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=jcol=acol[i][nzrow], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=jcol=acol[i][nzrow];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=aelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=aelt[i][nzrow], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=scale, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(aelt[i][nzrow]*scale), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=va=(aelt[i][nzrow]*scale), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=va=(aelt[i][nzrow]*scale);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(jcol==j), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(j==i), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=((jcol==j)&&(j==i)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=rcond, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=(va+rcond), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=shift, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=((va+rcond)-shift), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=va=((va+rcond)-shift), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=va=((va+rcond)-shift);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
va=((va+rcond)-shift);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=false, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=cont40=false, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=cont40=false;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(colidx[k]>jcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=2, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=(rowstr[(j+1)]-2), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=kk=(rowstr[(j+1)]-2), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=kk=(rowstr[(j+1)]-2);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=kk>=k, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=kk -- , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=colidx[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=( - 1), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=(colidx[kk]>( - 1)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=(kk+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=a[(kk+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=a[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=a[(kk+1)]=a[kk], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=a[(kk+1)]=a[kk];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=(kk+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=colidx[(kk+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=colidx[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=colidx[(kk+1)]=colidx[kk], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=colidx[(kk+1)]=colidx[kk];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value={
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value={
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=colidx[k]=jcol, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx[k]=jcol;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=a[k]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=a[k]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value={
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=( - 1), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=(colidx[k]==( - 1)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx[k]=jcol, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx[k]=jcol;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value={
colidx[k]=jcol;
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=(colidx[k]==jcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=16, Fatherid=15, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=15, Fatherid=14, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=(nzloc[j]+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=nzloc[j]=(nzloc[j]+1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=nzloc[j]=(nzloc[j]+1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value={
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value={
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value={
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=false, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(cont40==false), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=printf, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value="internal error in sparse: i=%d\n", typeValue=STRING EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=printf("internal error in sparse: i=%d\n", i), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=printf("internal error in sparse: i=%d\n", i);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=exit, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=exit(1), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=exit(1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
printf("internal error in sparse: i=%d\n", i);
exit(1);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(a[k]+va), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=a[k]=(a[k]+va), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=a[k]=(a[k]+va);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (nzrow=0; nzrow<arow[i]; nzrow ++ )
{
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
j=acol[i][nza];
scale=(size*aelt[i][nza]);
for (nzrow=0; nzrow<arow[i]; nzrow ++ )
{
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (nza=0; nza<arow[i]; nza ++ )
{
j=acol[i][nza];
scale=(size*aelt[i][nza]);
for (nzrow=0; nzrow<arow[i]; nzrow ++ )
{
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nzrow=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=nzrow=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=arow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=arow[i], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=nzrow<arow[i], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=nzrow ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=acol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=acol[i][nzrow], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=jcol=acol[i][nzrow], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=jcol=acol[i][nzrow];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=aelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nzrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=aelt[i][nzrow], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=scale, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(aelt[i][nzrow]*scale), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=va=(aelt[i][nzrow]*scale), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=va=(aelt[i][nzrow]*scale);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(jcol==j), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(j==i), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=((jcol==j)&&(j==i)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=rcond, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(va+rcond), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=shift, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=((va+rcond)-shift), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=va=((va+rcond)-shift), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=va=((va+rcond)-shift);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
va=((va+rcond)-shift);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=false, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=cont40=false, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=cont40=false;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(colidx[k]>jcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=2, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=(rowstr[(j+1)]-2), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=kk=(rowstr[(j+1)]-2), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=kk=(rowstr[(j+1)]-2);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=kk>=k, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=kk -- , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=( - 1), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=(colidx[kk]>( - 1)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=(kk+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=a[(kk+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=a[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=a[(kk+1)]=a[kk], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=a[(kk+1)]=a[kk];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=(kk+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=colidx[(kk+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=colidx[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx[(kk+1)]=colidx[kk], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx[(kk+1)]=colidx[kk];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value={
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value={
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx[k]=jcol, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[k]=jcol;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a[k]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a[k]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=( - 1), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(colidx[k]==( - 1)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=colidx[k]=jcol, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx[k]=jcol;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value={
colidx[k]=jcol;
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=(colidx[k]==jcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=14, Fatherid=13, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=13, Fatherid=12, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=(nzloc[j]+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=nzloc[j]=(nzloc[j]+1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=nzloc[j]=(nzloc[j]+1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value={
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value={
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=false, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(cont40==false), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=printf, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value="internal error in sparse: i=%d\n", typeValue=STRING EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=printf("internal error in sparse: i=%d\n", i), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=printf("internal error in sparse: i=%d\n", i);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=exit, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=exit(1), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=exit(1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
printf("internal error in sparse: i=%d\n", i);
exit(1);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=va, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(a[k]+va), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=a[k]=(a[k]+va), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=a[k]=(a[k]+va);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (nzrow=0; nzrow<arow[i]; nzrow ++ )
{
jcol=acol[i][nzrow];
va=(aelt[i][nzrow]*scale);
if (((jcol==j)&&(j==i)))
{
va=((va+rcond)-shift);
}
cont40=false;
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}
if ((cont40==false))
{
printf("internal error in sparse: i=%d\n", i);
exit(1);
}
a[k]=(a[k]+va);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(colidx[k]>jcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=2, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(rowstr[(j+1)]-2), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=kk=(rowstr[(j+1)]-2), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=kk=(rowstr[(j+1)]-2);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=kk>=k, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=kk -- , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=( - 1), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(colidx[kk]>( - 1)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=(kk+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=a[(kk+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=a[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=a[(kk+1)]=a[kk], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=a[(kk+1)]=a[kk];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=(kk+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx[(kk+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=colidx[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=colidx[(kk+1)]=colidx[kk], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx[(kk+1)]=colidx[kk];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value={
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx[k]=jcol, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[k]=jcol;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=0.0, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=a[k]=0.0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=a[k]=0.0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=( - 1), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(colidx[k]==( - 1)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx[k]=jcol, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[k]=jcol;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
colidx[k]=jcol;
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=jcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(colidx[k]==jcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=12, Fatherid=11, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=11, Fatherid=10, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=(nzloc[j]+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=nzloc[j]=(nzloc[j]+1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=nzloc[j]=(nzloc[j]+1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=cont40, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=10, Fatherid=9, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=cont40=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=cont40=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value={
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
if ((colidx[k]>jcol))
{
for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}
colidx[k]=jcol;
a[k]=0.0;
cont40=true;
break;
}
else
{
if ((colidx[k]==( - 1)))
{
colidx[k]=jcol;
cont40=true;
break;
}
else
{
if ((colidx[k]==jcol))
{
nzloc[j]=(nzloc[j]+1);
cont40=true;
break;
}
}
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=2, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(rowstr[(j+1)]-2), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=kk=(rowstr[(j+1)]-2), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=kk=(rowstr[(j+1)]-2);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=kk>=k, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=kk -- , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=( - 1), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(colidx[kk]>( - 1)), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(kk+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a[(kk+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=a[(kk+1)]=a[kk], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=a[(kk+1)]=a[kk];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=(kk+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[(kk+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=kk, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[kk], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx[(kk+1)]=colidx[kk], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[(kk+1)]=colidx[kk];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (kk=(rowstr[(j+1)]-2); kk>=k; kk -- )
{
if ((colidx[kk]>( - 1)))
{
a[(kk+1)]=a[kk];
colidx[(kk+1)]=colidx[kk];
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=1, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=1;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nrows, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<nrows, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(j-1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzloc[(j-1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(nzloc[j]+nzloc[(j-1)]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nzloc[j]=(nzloc[j]+nzloc[(j-1)]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nzloc[j]=(nzloc[j]+nzloc[(j-1)]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
nzloc[j]=(nzloc[j]+nzloc[(j-1)]);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=1; j<nrows; j ++ )
{
nzloc[j]=(nzloc[j]+nzloc[(j-1)]);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nrows, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<nrows, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(j>0), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=9, Fatherid=8, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=(j-1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=nzloc[(j-1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(rowstr[j]-nzloc[(j-1)]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j1=(rowstr[j]-nzloc[(j-1)]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j1=(rowstr[j]-nzloc[(j-1)]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
j1=(rowstr[j]-nzloc[(j-1)]);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j1=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j1=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
j1=0;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if ((j>0))
{
j1=(rowstr[j]-nzloc[(j-1)]);
}
else
{
j1=0;
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzloc[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(rowstr[(j+1)]-nzloc[j]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j2=(rowstr[(j+1)]-nzloc[j]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j2=(rowstr[(j+1)]-nzloc[j]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nza=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nza=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k=j1, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k=j1;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k<j2, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=a[nza], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=a[k]=a[nza], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=a[k]=a[nza];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[nza], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx[k]=colidx[nza], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[k]=colidx[nza];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(nza+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nza=(nza+1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nza=(nza+1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
a[k]=a[nza];
colidx[k]=colidx[nza];
nza=(nza+1);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (k=j1; k<j2; k ++ )
{
a[k]=a[nza];
colidx[k]=colidx[nza];
nza=(nza+1);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
if ((j>0))
{
j1=(rowstr[j]-nzloc[(j-1)]);
}
else
{
j1=0;
}
j2=(rowstr[(j+1)]-nzloc[j]);
nza=rowstr[j];
for (k=j1; k<j2; k ++ )
{
a[k]=a[nza];
colidx[k]=colidx[nza];
nza=(nza+1);
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<nrows; j ++ )
{
if ((j>0))
{
j1=(rowstr[j]-nzloc[(j-1)]);
}
else
{
j1=0;
}
j2=(rowstr[(j+1)]-nzloc[j]);
nza=rowstr[j];
for (k=j1; k<j2; k ++ )
{
a[k]=a[nza];
colidx[k]=colidx[nza];
nza=(nza+1);
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k=j1, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k=j1;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j2, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k<j2, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=a[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=a, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=a[nza], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=a[k]=a[nza], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=a[k]=a[nza];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[nza], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=colidx[k]=colidx[nza], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=colidx[k]=colidx[nza];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nza, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(nza+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nza=(nza+1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nza=(nza+1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
a[k]=a[nza];
colidx[k]=colidx[nza];
nza=(nza+1);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (k=j1; k<j2; k ++ )
{
a[k]=a[nza];
colidx[k]=colidx[nza];
nza=(nza+1);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=1, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=1;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nrows, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=(nrows+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<(nrows+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nzloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(j-1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzloc[(j-1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(rowstr[j]-nzloc[(j-1)]), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr[j]=(rowstr[j]-nzloc[(j-1)]), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=rowstr[j]=(rowstr[j]-nzloc[(j-1)]);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
rowstr[j]=(rowstr[j]-nzloc[(j-1)]);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=1; j<(nrows+1); j ++ )
{
rowstr[j]=(rowstr[j]-nzloc[(j-1)]);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nz, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=nzv<nz, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=was_gen, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=false, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value= = false, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=was_gen = false, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=logical was_gen = false, typeValue=DELCARATION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=logical was_gen = false;, typeValue=DECLARATION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=vecelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=randlc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=tran, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=( & tran), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=amult, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=randlc(( & tran), amult), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=vecelt=randlc(( & tran), amult), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=vecelt=randlc(( & tran), amult);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=vecloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=randlc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=tran, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=( & tran), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=amult, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=randlc(( & tran), amult), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=vecloc=randlc(( & tran), amult), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=vecloc=randlc(( & tran), amult);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=icnvrt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=vecloc, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=nn1, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=icnvrt(vecloc, nn1), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(icnvrt(vecloc, nn1)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=i=(icnvrt(vecloc, nn1)+1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i=(icnvrt(vecloc, nn1)+1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=n, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(i>n), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=continue;, typeValue=CONTINUES_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
continue;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if ((i>n))
{
continue;
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=ii, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=ii=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=ii=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=ii, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=ii<nzv, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=ii, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=ii ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=iv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=ii, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=iv[ii], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(iv[ii]==i), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=was_gen, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=was_gen=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=was_gen=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value={
was_gen=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=if ((iv[ii]==i))
{
was_gen=true;
break;
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
if ((iv[ii]==i))
{
was_gen=true;
break;
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (ii=0; ii<nzv; ii ++ )
{
if ((iv[ii]==i))
{
was_gen=true;
break;
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=was_gen, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=continue;, typeValue=CONTINUES_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
continue;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if (was_gen)
{
continue;
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=v, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=v[nzv], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=vecelt, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=v[nzv]=vecelt, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=v[nzv]=vecelt;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=iv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=iv[nzv], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=iv[nzv]=i, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=iv[nzv]=i;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=(nzv+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nzv=(nzv+1), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nzv=(nzv+1);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
logical was_gen = false;
vecelt=randlc(( & tran), amult);
vecloc=randlc(( & tran), amult);
i=(icnvrt(vecloc, nn1)+1);
if ((i>n))
{
continue;
}
for (ii=0; ii<nzv; ii ++ )
{
if ((iv[ii]==i))
{
was_gen=true;
break;
}
}
if (was_gen)
{
continue;
}
v[nzv]=vecelt;
iv[nzv]=i;
nzv=(nzv+1);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=while (nzv<nz)
{
logical was_gen = false;
vecelt=randlc(( & tran), amult);
vecloc=randlc(( & tran), amult);
i=(icnvrt(vecloc, nn1)+1);
if ((i>n))
{
continue;
}
for (ii=0; ii<nzv; ii ++ )
{
if ((iv[ii]==i))
{
was_gen=true;
break;
}
}
if (was_gen)
{
continue;
}
v[nzv]=vecelt;
iv[nzv]=i;
nzv=(nzv+1);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=ii, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=ii=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=ii=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=ii, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=ii<nzv, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=ii, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=ii ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=iv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=ii, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=iv[ii], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(iv[ii]==i), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=was_gen, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=was_gen=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=was_gen=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=break;, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
was_gen=true;
break;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if ((iv[ii]==i))
{
was_gen=true;
break;
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
if ((iv[ii]==i))
{
was_gen=true;
break;
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (ii=0; ii<nzv; ii ++ )
{
if ((iv[ii]==i))
{
was_gen=true;
break;
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=nzv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=( * nzv), typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k<( * nzv), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=iv, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=iv[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(iv[k]==i), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=v, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=v[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=val, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=v[k]=val, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=v[k]=val;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=set, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=true, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=set=true, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=set=true;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
v[k]=val;
set=true;
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=if ((iv[k]==i))
{
v[k]=val;
set=true;
}, typeValue=IFSTATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
if ((iv[k]==i))
{
v[k]=val;
set=true;
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (k=0; k<( * nzv); k ++ )
{
if ((iv[k]==i))
{
v[k]=val;
set=true;
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
Value, DataType 
Value, DataType 
Value, DataType 
DataRaw [id=3, Fatherid=2, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=3, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i<3, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=timer_clear, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=timer_clear(i), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=timer_clear(i);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
timer_clear(i);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (i=0; i<3; i ++ )
{
timer_clear(i);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=lastrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=firstrow, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=(lastrow-firstrow), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=((lastrow-firstrow)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j<((lastrow-firstrow)+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=j ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=1, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=(j+1), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr[(j+1)], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k<rowstr[(j+1)], typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=colidx, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=8, Fatherid=7, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=colidx[k], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=7, Fatherid=6, value=firstcol, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=6, Fatherid=5, value=(colidx[k]-firstcol), typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=5, Fatherid=4, value=colidx[k]=(colidx[k]-firstcol), typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=colidx[k]=(colidx[k]-firstcol);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value={
colidx[k]=(colidx[k]-firstcol);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
colidx[k]=(colidx[k]-firstcol);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
colidx[k]=(colidx[k]-firstcol);
}
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (j=0; j<((lastrow-firstrow)+1); j ++ )
{
for (k=rowstr[j]; k<rowstr[(j+1)]; k ++ )
{
colidx[k]=(colidx[k]-firstcol);
}
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=k, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=rowstr, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=j, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=rowstr[j], typeValue=ARRAY_ACESS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=k=rowstr[j], typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=k=rowstr[j];, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
Value, DataType 
Value, DataType 
DataRaw [id=3, Fatherid=2, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=0, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i=0, typeValue=ASSIGMENT_EXPRESSION BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i=0;, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=3, typeValue=INTEGER EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i<3, typeValue=BINARY_EXPRESSION_ EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value=i ++ , typeValue=EXPRESSION VARIABLE_DECLARATION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=timer_clear, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=4, Fatherid=3, value=i, typeValue=EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=3, Fatherid=2, value=timer_clear(i), typeValue=FUNCTIONCALLS EXPRESSION , lineCode=1]
-------------------------------------------
DataRaw [id=2, Fatherid=1, value=timer_clear(i);, typeValue=EXPRESSION_STATEMENT , lineCode=1]
-------------------------------------------
DataRaw [id=1, Fatherid=0, value={
timer_clear(i);
}, typeValue=, lineCode=1]
-------------------------------------------
DataRaw [id=0, Fatherid=0, value=for (i=0; i<3; i ++ )
{
timer_clear(i);
}, typeValue=LOOP , lineCode=1]
-------------------------------------------
Value, DataType 
Value, DataType 
Value, DataType 
Value, DataType 
Value, DataType 
Value, DataType 
Value, DataType 
Value, DataType 
Value, DataType 
Value, DataType 
Value, DataType 
Value, DataType 
Value, DataType 
Value, DataType 
